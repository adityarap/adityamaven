name: Terraform  # This is a basic workflow to help you get started with Actions

# Controls when the workflow will run  (or) condition where actions should be kicked in
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "feature" ]
    #paths: 
    #  - '*/**'  - it states all push 
  #pull_request:
  #  branches: [ "main" ]
  #  paths:
  #  - src/api/*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job
  build:
    name: 'Terraform'
    # The type of runner that the job will run on
    runs-on: selfhosted #ubuntu-latest
    #environment: production
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} #webhook URL stored in github secrets
      # we can save below secrets in github action settings
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #AWS_DEFAULT_REGION: us-east-2 #AWS_REGION: us-east-1

    #use bash shell regardless whether the github action is ubuntu or others
    #when we run any command it runs as bash command instead of powershell or others
    defaults:
      run:
        shell: bash  

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - uses: act10ns/slack@v1
        with:
          status: starting
          channel: '#workflows'
          message: Starting Docker Build and Push...
        if: always()
        
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3 # we are using terraform existing actions to checkout

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        #with:
        #  terraform_wrapper: false
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }} #github has inbuilt tokens it uses

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        #if: github.event_name == 'push'  # we can metion condition to trigger plan
        run: terraform plan
        continue-on-error: true
      
      #condition on terraform plan command
      - name: Terraform plan statue
        if: steps.plan.outcome == 'failure'
        run: exit 1

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/"main"' && github.event_name == 'push' #this condition state the apply comand will only trigger if changes made to main branch
        run: terraform apply -auto-approve

        # Added slack notifications to send job status 
      - name: Slack Notification
        uses: act10ns/slack@v1
        with: 
          status: ${{ job.status }}
          channel: '#meetups'
          #notify_when: 'failure'
        if: always() #Job successes or fails we get notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }} #we can mmetion here aswell

        # Added email notification
      - name: Send mail
        if: always()
        uses: dawidd6/action-send-mail@v2
        with:
          # mail server settings
          server_address: smtp.gmail.com
          server_port: 465
          # user credentials
          # Optional (recommended) mail server username:
          username: ${{ secrets.EMAIL_USERNAME }}
          # Optional (recommended) mail server password:
          password: ${{ secrets.EMAIL_PASSWORD }}
          # email subject
          subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}
          # email body as text
          body: ${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}
          # comma-separated string, send email to
          to: abc@gmail.com,xyz@gmail.com
          # from email name
          from: xyz
      
